from datetime import datetime
from dataclasses import dataclass
import csv
import string


@dataclass
class Movie:
    Title: str
    Year: int
    Length: str
    Rating: str

def get_quicknav_html(movie_list):
    links = "\n".join(f'<a class="qn-link" href="#qn-{letter}">{letter.upper()}</a>' for letter in string.ascii_lowercase)
    return f"<h2>Quick Navigation</h2>\n<p>\n{links}\n</p>\n"

def get_quicknav_anchor(letter):
    return "qn-" + letter

def get_listing_html(movie, qnid):
    id_attr = f' id="{qnid[-4:]}"' if qnid else ''
    return f"""<tr{id_attr}><td>{movie.Title}</td><td>{movie.Year}</td><td>{movie.Rating}</td><td>{movie.Length}</td></tr>\n"""


alphabet = string.ascii_lowercase
datestring = datetime.today().strftime("%B %e, %Y at %I:%M %p")
if "at 0" in datestring:
    # change formatting for times with a single digit hour
    datestring = datestring.replace("at 0", "at ")
pageheader = f"""---
title: Movie Records
last_updated: {datestring}
---
"""

signaturehtml = """
<!-- Generated by https://github.com/egartley/records !-->
<link href="/stylesheets/records-style.css" rel="stylesheet" type="text/css">
"""
listinghtml = """<h2>All Movies Watched</h2>
<table>
<tr><th>Title</th><th>Year</th><th>Rating</th><th>Length</th></tr>
"""

alphabet_index = 0
lastletter = ""
nummode = True
movie_list = []

# build list of movie objects from csv
with open("movies.csv", mode="r") as moviescsv:   
    file = csv.DictReader(moviescsv)
    movie_list = [Movie(**row) for row in file]

# sort alphabetically by movie title
movie_list = sorted(movie_list, key=lambda movie: movie.Title)

# build non-listing html
quicknavhtml = get_quicknav_html(movie_list)

# build listing html
for movie in movie_list:
    current_letter = movie.Title[0].upper()
    tempqn = ""
    # check if finished with numbered titles
    if nummode and current_letter.isalpha():
        # finished with numbered titles, output quick link nav for A
        nummode = False
        tempqn += get_quicknav_anchor(alphabet[alphabet_index])
    if not nummode:
        while alphabet[alphabet_index].upper() != current_letter:
            # output quick nav link for the new letter
            alphabet_index += 1
            tempqn += get_quicknav_anchor(alphabet[alphabet_index])
    # proceed with regular listing html for current movie
    listinghtml += get_listing_html(movie, tempqn)
listinghtml += "</table>\n"

with open("movies.html", mode="w") as outfile:
    outfile.write(pageheader + signaturehtml + quicknavhtml + listinghtml)

print("Done!")
