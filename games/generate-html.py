from dataclasses import dataclass
from datetime import datetime
import csv
import math
from pathlib import Path


@dataclass
class Game:
    title: str
    year: int
    platform: str
    rating: float
    hundo: bool
    plat: bool
    iconid: str
    hours: int
    playthroughs: int
    dlc: bool

    def __post_init__(self):
        self.iconid = self.iconid.zfill(6)

def get_rating_html(rating):
    fullstars = int(rating)
    hashalf = rating % 1 != 0
    empties = 5 - math.ceil(rating)

    content = f"<img src=\"/resources/png/wT9F00t1BuDE9wRx/sf.png\">" * fullstars
    content += "<img src=\"/resources/png/wT9F00t1BuDE9wRx/sh.png\">" * hashalf
    content += "<img src=\"/resources/png/wT9F00t1BuDE9wRx/se.png\">" * empties

    return f"<span class=\"gamecard-rating flex\">{content}</span>"

def get_playtext(game):
    playthrough_mapping = {
        0: " (incomplete)",
        -9: " (abandoned)",
        -1: " (in-progress)"
    }
    hourstext = f"{game.hours} hours"
    playthroughtext = playthrough_mapping.get(game.playthroughs, "")
    if game.playthroughs > 1:
        playthroughtext = f", played {game.playthroughs} times"
    return f"{hourstext}{playthroughtext}"

def get_listing_html(game):
    platform_mapping = {
        "DS": "Nintendo DS",
        "3DS": "Nintendo 3DS",
        "Switch": "Nintendo Switch",
        "Wii": "Nintendo Wii",
        "iOS": "Mobile (iOS)"
    }
    platform = platform_mapping.get(game.platform, game.platform)

    icons = ""
    if game.dlc or game.hundo or game.plat:
        icons = "<span class=\"gamecard-icons\">"
        if game.dlc:
            icons += "<span class=\"dlc\">DLC</span>"
        if game.hundo:
            icons += "<span class=\"hundo\">100%</span>"
        if game.plat:
            icons += "<img alt=\"plat\" src=\"/resources/png/wT9F00t1BuDE9wRx/plat.png\">"
        icons += "</span>"

    return f"""<div class="gamecard flex card">
    <div class="gamecard-outer flex">
        <img id="i{game.iconid}" alt="icon" src="/resources/png/B1cZjrwAuuPI9Cyd/blank.png">
        <div class="gamecard-inner flex">
            <span class="gamecard-subtext">{game.year}</span>
            <span class="gamecard-subtext">{platform}</span>
            {icons}
        </div>
    </div>
    <span class="gamecard-title flex">{game.title}</span>
    {get_rating_html(game.rating)}
    <span class="gamecard-playtext">{get_playtext(game)}</span>
</div>
"""

def get_icon_css(iconid):
    filename = f"icons{int(iconid[1]) + 1 if iconid[1] != '0' else ''}.png"
    x = -64 * int(iconid[4:6])
    y = -64 * int(iconid[2:4])
    return f"img#i{iconid}{{background:url(/resources/png/wT9F00t1BuDE9wRx/{filename}) {x}px {y}px}}"

def calc_stats():
    rating_dict = {5: 0, 4.5: 1, 4: 2, 3.5: 3, 3: 4, 2.5: 5}
    platform_dict = {
        "PlayStation 4": 0, "PlayStation 5": 0,
        "PlayStation 1": 1, "PlayStation 2": 1,
        "3DS": 2, "DS": 2, "DSi": 2, "DSiWare": 2,
        "Switch": 3,
        "Wii": 4,
        "PC": 5
    }
    for game in game_list:
        rating_index = rating_dict.get(game.rating, 6)
        stat_ratings[rating_index][1] += 1
        platform_index = platform_dict.get(game.platform, 6)
        stat_platforms[platform_index][1] += 1
        if game.hundo:
            stat_completion[0][1] += 1
        if game.plat:
            stat_completion[1][1] += 1

def get_single_stat_html(title, values):
    lines = [f"<div class=\"stat\">\n<span class=\"bold\">{title}</span>"]
    lines.extend(f"{v[0]} ({v[1]})" for v in values)
    content = "<br>\n".join(lines)
    return f"{content}</div>\n"

def get_stats_html():
    content = [
        get_single_stat_html("Platforms", stat_platforms),
        get_single_stat_html("Ratings", stat_ratings),
        get_single_stat_html("Completion", stat_completion)
    ]
    stats_html = "<h2>Statistics</h2>\n<div class=\"stat-container\">\n"
    stats_html += "\n".join(content)
    stats_html += f"</div>\n<p>Total games: {len(game_list)}</p>\n"
    return stats_html


datestring = datetime.today().strftime("%B %e, %Y at %I:%M %p")
pageheader = f"""---
permalink: /records/games/
layout: greystone
title: Game Records
last_updated: {datestring}
---
"""

signaturehtml = f"""<!-- Generated by https://github.com/egartley/records !-->
<link href="/resources/css/rLzoDOi3W5sFgVCX/game-records-icons.css" rel="stylesheet" type="text/css">
<link href="/resources/css/rLzoDOi3W5sFgVCX/game-records-style.css" rel="stylesheet" type="text/css">
<script src="https://code.jquery.com/jquery-3.7.1.min.js" type="application/javascript"></script>
<script src="/resources/js/tktKmZk7PrGIDVqH/game-records.js" type="application/javascript"></script>
<p>This is a record of every game I've played since 2006 or so. Each game has a rating out of 5, a rough estimate of total play time, and number of playthroughs (if more than one). Games that have been 100% completed include a tag next to the title, as well as those where I've gotten its platinum trophy on PSN. A vast majority of games were played on original hardware, but some of the older titles were emulated on PC.</p>
<p>Click on a game to view more details about it. Some will have notes about how good or bad it was, why they may have been abandoned, and other things like that.</p>
"""

selecthtml = f"""<label for="sortby">Sort games by:</label>
<select name="sortby" id="sortby" style="margin-right:12px">
<option selected="selected" value="titleAZ">Title A-Z (Default)</option><option value="titleZA">Title Z-A</option>
<option value="yearUp">Year (Ascending)</option><option value="yearDown">Year (Descending)</option>
<option value="ratingUp">Rating (Ascending)</option><option value="ratingDown">Rating (Descending)</option>
<option value="hoursUp">Hours (Ascending)</option><option value="hoursDown">Hours (Descending)</option></select>
<label for="filter">Filter: </label><select name="filter" id="filter" style="margin-right:12px">
<option selected="selected" value="none">None (Default)</option>
<option value="platform">Platform</option><option value="rating">Rating</option>
<option value="year">Release Year</option><option value="hours">Hours Played</option>
<option value="playthroughs">Playthroughs</option><option value="hundo">100% Completion</option>
<option value="plat">Platinum Trophy</option></select>
<label class="filterby" style="display:none" for="filterby">THISSHOULDNOTBEVISIBLE</label>
<select name="filterby" class="filterby" style="display:none">
<option selected="selected" value="itsnotworkingbud">None (Default)</option></select>
"""

listinghtml = f"<h2>All Games Played</h2>{selecthtml}<div class=\"gamecard-container flex\">\n"

game_list = []
iconcss = ""
stat_ratings = [["5 stars", 0], ["4.5 stars", 0], ["4 stars", 0], ["3.5 stars", 0],
                ["3 stars", 0], ["2.5 stars", 0], ["2 stars or below", 0]]
stat_platforms = [["PS4/PS5", 0], ["PS1/PS2", 0], ["3DS/DS/DSi", 0], ["Switch", 0],
                  ["Wii", 0], ["PC", 0], ["Other", 0]]
stat_completion = [["100% Complete", 0], ["Platinum Trophy", 0]]

# build list of game objects from csv
with open("games.csv", mode="r") as gamescsv:   
    file = csv.reader(gamescsv)
    game_list = [Game(str(gl[0]), str(gl[2]), str(gl[3]), float(gl[4]), int(gl[5]) == 1,
                      int(gl[6]) == 1, str(gl[7]), int(gl[8]), int(gl[9]), int(gl[10]) == 1) 
                 for i, gl in enumerate(file) if i != 0]

# sort alphabetically by game title
game_list.sort(key=lambda game: game.title)

# build non-listing html
calc_stats()
statshtml = get_stats_html()

# build listing html
listinghtml += "".join(get_listing_html(game) for game in game_list)
listinghtml += "</div>\n"

with open("games.html", mode="w") as outfile:
    outfile.write(f"{pageheader}{signaturehtml}{statshtml}{listinghtml}")

iconcss = "".join(get_icon_css(game.iconid) for game in game_list)

with open("game-records-icons.css", mode="w") as outfile:
    outfile.write(iconcss)

print("Done!")
