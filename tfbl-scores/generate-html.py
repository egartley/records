from datetime import datetime
import csv
import math


class Song:
    def __init__(self, songid, title, series, beginner, expert, ultimate, supreme):
        self.songid = songid
        self.title = title
        self.series = series
        self.beginner = beginner
        self.expert = expert
        self.ultimate = ultimate
        self.supreme = supreme
        self.unquotedtitle = title.replace("\"", "")


def get_quicknav_html():
    start = "<h2>Quick Navigation</h2>\n<p>\n"
    end = "</p>\n"
    links = "<a class=\"qn-link\" href=\"#qn-num\">#</a>\n"
    for letter in alphabet:
        links += "<a class=\"qn-link\" href=\"#qn-" + letter + "\">" + letter.upper() + "</a>\n"
    return start + links + end

def get_quicknav_anchor(letter):
    return "<span id=\"qn-" + letter + "\"></span>"

def get_listing_html(song):
    start = "<div class=\"songcard flex col\">"
    content = "<span class=\"songcard-title\">" + song.title.replace("Bra?", "Bra&#9733;")
    content += "</span><span class=\"songcard-series\">" + song.series.replace("Bra?", "Bra&#9733;") + "</span><div class=\"songcard-scores flex\">"
    content += "<span class=\"songcard-beginner\">" + str(song.beginner) + "</span><span class=\"songcard-expert\">" + str(song.expert) + "</span>"
    content += "<span class=\"songcard-ultimate\">" + str(song.ultimate) + "</span><span class=\"songcard-supreme\">" + str(song.supreme) + "</span></div>"
    end = "</div>\n"
    return start + content + end


alphabet = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m",
            "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]
datestring = datetime.today().strftime("%B %e, %Y at %I:%M %p")
if "at 0" in datestring:
    datestring = datestring.replace("at 0", "at ")
pageheader = "---\npermalink: /records/tfbl-scores/\nlayout: wnesenior\ntitle: Theatrhythm Final Bar Line Scores\nbase_url: /records/\nlast_updated: "
pageheader += datestring + "\n---\n\n"
signaturehtml = "<!-- Generated by https://github.com/egartley/records !-->\n"
signaturehtml += "<link href=\"/resources/css/tfbl-scores-style.css\" rel=\"stylesheet\" type=\"text/css\">\n"
signaturehtml += "<p>This page is currently UNFINISHED. Scores for the other difficulties need to be added, as well as additional information about each song.</p>\n"
listinghtml = "<h2>All Scores</h2>\n<div class=\"songcard-container flex col\">\n" + get_quicknav_anchor("#") + "\n"

alphabet_index = 0
lastletter = ""
nummode = True
song_list = []

# build list from csv
with open("tfbl-scores.csv", mode="r") as tfblcsv:   
  file = csv.reader(tfblcsv)
  firstline = True
  for gl in file:
      if firstline:
          firstline = False
          continue
      song = Song(int(gl[0]), str(gl[2]), str(gl[1]), int(gl[4]), int(gl[5]), int(gl[6]), int(gl[7]))
      song_list.append(song)

# sort alphabetically by title
song_list = sorted(song_list, key=lambda song: song.unquotedtitle)

# build non-listing html
quicknavhtml = get_quicknav_html()

# build listing html
for song in song_list:
    lastletter = song.unquotedtitle[0:1].upper()
    # check if finished with numbered titles
    if nummode and lastletter.isalpha():
        # finished with numbered titles, output quick link nav for A
        nummode = False
        listinghtml += get_quicknav_anchor(alphabet[alphabet_index]) + "\n"
    if not nummode:
        while not alphabet[alphabet_index].upper() == lastletter:
            # output quick nav link for the new letter
            alphabet_index += 1
            listinghtml += get_quicknav_anchor(alphabet[alphabet_index]) + "\n"
    # proceed with regular listing html for current game
    listinghtml += get_listing_html(song)

# add remaining quick nav links
while alphabet_index < len(alphabet) - 1:
    alphabet_index += 1
    listinghtml += get_quicknav_anchor(alphabet[alphabet_index]) + "\n"
listinghtml += "</div>\n"

# output file
with open("tfbl-scores.html", mode="w") as outfile:
    outfile.write(pageheader + signaturehtml + quicknavhtml + listinghtml)

print("Done!")
