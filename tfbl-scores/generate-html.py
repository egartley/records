from datetime import datetime
import csv


class Song:
    def __init__(self, songid: str, songtype: str, title: str, series: str, beginner: int, expert: int, ultimate: int, supreme: int):
        self.songid = songid
        self.songtype = songtype
        self.title = title.replace("Bra?", "Bra&#9733;")
        self.series = series.replace("Bra?", "Bra&#9733;")
        self.beginner = beginner
        self.expert = expert
        self.ultimate = ultimate
        self.supreme = supreme
        self.unquotedtitle = title.replace("\"", "")

def get_series_nav_html():
    content = ""
    lastseries = ""
    i = 0
    for song in song_list:
        if song.series != lastseries:
            lastseries = song.series
            content += f'<a href="#qn-s{i}">{song.series}</a><br>\n'
            i += 1
    return content

last_series = ""
series_index = 0
song_list = []

datestring = datetime.today().strftime("%B %e, %Y at %I:%M %p")
if "at 0" in datestring:
    datestring = datestring.replace("at 0", "at ")

pageheader = f"""---
title: Theatrhythm Final Bar Line Scores
last_updated: {datestring}
---
"""

signaturehtml = """
<!-- Generated by https://github.com/egartley/records !-->
<link href="/stylesheets/tfbl-scores-style.css" rel="stylesheet" type="text/css">
<script src="https://code.jquery.com/jquery-3.7.1.min.js" type="application/javascript"></script>
<p>These are my current scores in the game <i>Theatrhythm Final Bar Line</i> for PlayStation. Each song has the score listed for the three difficulties along with the stage type next to the title. For the most part, the awkward capitalization and formatting of the titles has been preserved from the game, except for titles that have the series name prepended to them (mainly the FFVII Remake songs). None of the DLC songs are included.</p>
"""

listinghtml = "<div class=\"songcard-container flex col\">\n"

# build list from csv
with open("tfbl-scores.csv", mode="r") as tfblcsv:   
  file = csv.reader(tfblcsv)
  firstline = True
  for gl in file:
      if firstline:
          firstline = False
          continue
      song = Song(int(gl[0]), str(gl[3]), str(gl[2]), str(gl[1]), int(gl[4]), int(gl[5]), int(gl[6]), int(gl[7]) if not str(gl[7]) == "-" else -1)
      song_list.append(song)

# build navigate by series html
prepend = f"""
<span>
    <h2 style="display:inline">Navigate by Series</h2>
    <style>span.showhide:hover{{cursor:pointer}}</style>
    <span class="showhide" onclick="p=$('p#navseries'),t=$(this);p.is(':visible')?p.slideUp()&t.html('Show'):p.slideDown()&t.html('Hide')">Hide</span>
</span>
<p id="navseries">{get_series_nav_html()}
"""
listinghtml = f"{prepend}{listinghtml}"

# build listing html
for song in song_list:
    start = "<div class=\"songcard flex col\">"
    if not last_series == song.series:
        last_series = song.series
        start += f"<span class=\"qn-link\" id=\"qn-s{series_index}\"></span>"
        series_index += 1
    content = f"""
    <span class="songcard-title flex">{song.title}
        <span class="songcard-{song.songtype.lower()}">{song.songtype}</span>
    </span>
    <span class="songcard-series">{song.series}</span>
    <div class="songcard-scores flex">
        <span class="songcard-beginner">{song.beginner}</span>
        <span class="songcard-expert">{song.expert}</span>
        <span class="songcard-ultimate">{song.ultimate}</span>
    """
    if song.supreme != -1:
        content += f"<span class=\"songcard-supreme\">{song.supreme}</span>"
    content += "</div>"
    end = """
</div>\n"""
    listinghtml += f"{start}{content}{end}"
listinghtml += "</div>\n"

# output file
with open("tfbl-scores.html", mode="w") as outfile:
    outfile.write(f"{pageheader}{signaturehtml}{listinghtml}")

print("Done!")
