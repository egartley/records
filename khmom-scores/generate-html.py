from datetime import datetime
import csv


class Song:
    def __init__(self, songtype: str, title: str, series: str, beginner: int, standard: int, proud: int):
        self.songtype = songtype
        self.title = title
        self.series = series
        self.beginner = beginner
        self.standard = standard
        self.proud = proud

def get_series_nav_html():
    lastseries = ""
    content = []
    i = 0
    for song in song_list:
        if song.series != lastseries:
            lastseries = song.series
            content.append(f'<a href="#qn-s{i}">{song.series}</a><br>')
            i += 1
    return '\n'.join(content)

last_series = ""
series_index = 0
song_list = []

datestring = datetime.today().strftime("%B %e, %Y at %I:%M %p")
if "at 0" in datestring:
    datestring = datestring.replace("at 0", "at ")

pageheader = f"""---
permalink: /records/khmom-scores/
layout: greystone
title: Kingdom Hearts Melody of Memory Scores
last_updated: {datestring}
---
"""

signaturehtml = """
<!-- Generated by https://github.com/egartley/records !-->
<link href="/resources/css/rLzoDOi3W5sFgVCX/khmom-scores-style.css" rel="stylesheet" type="text/css">
<p>These are my current scores in the game <i>Kingdom Hearts Melody of Memory</i> for PlayStation. Each song has the score listed for the three difficulties along with the stage type next to the title. For the most part, the awkward capitalization and formatting of the titles has been preserved from the game.</p>
"""

listinghtml = "<div class=\"songcard-container flex col\">"

# build list from csv
with open("khmom-scores.csv", mode="r") as tfblcsv:   
  file = csv.reader(tfblcsv)
  firstline = True
  for gl in file:
      if firstline:
          firstline = False
          continue
      song = Song(str(gl[3]), str(gl[2]), str(gl[0]), int(gl[4]), int(gl[5]), int(gl[6]))
      song_list.append(song)

# build navigate by series html
listinghtml = f'<h2 style="display:inline">Navigate by Series</h2><p id="navseries">{get_series_nav_html()}\n{listinghtml}'

# build listing html
for song in song_list:
    if last_series != song.series:
        last_series = song.series
        series_anchor = f'<span class="qn-link" id="qn-s{series_index}"></span>'
        series_index += 1
    else:
        series_anchor = ''

    song_type_span = '' if song.songtype == "Field" else f'<span class="songcard-{song.songtype.lower()}">{song.songtype}</span>'

    listinghtml += f"""
    <div class="songcard flex col">{series_anchor}
        <span class="songcard-title flex">
            {song.title}{song_type_span}
        </span>
        <span class="songcard-series">{song.series}</span>
        <div class="songcard-scores flex">
            <span class="songcard-beginner">{song.beginner}</span>
            <span class="songcard-standard">{song.standard}</span>
            <span class="songcard-proud">{song.proud}</span>
        </div>
    </div>"""
listinghtml += "\n</div>\n"

# output file
with open("khmom-scores.html", mode="w") as outfile:
    outfile.write(pageheader + signaturehtml + listinghtml)

print("Done!")
